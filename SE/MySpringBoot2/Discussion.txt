Spring vs JEE? Spring is better

Architecture:
SPA connecting to Spring Boot REST

REST:
Tech Dependencies
1. Spring Boot (2.4.4)
2. Spring Data (2.4.6)
	Spring Core (5.3.5)
	Hibernate (5.4.29)
3. JPA (2.2.3)



Components:
1. App
	structure:
		com.tougher.app - Application
		com.tougher.app.v1.controller - Controllers
		com.tougher.app.v1.service - Service
		com.tougher.app.v1.repo.* - (util) Repository, Custom Repos
		com.tougher.app.v1.dto.* - (criteria, enums, ref) DTO, Search Criteria 
		com.tougher.app.v1.model.* - (enums, ref) Entities
1. Controller
	Design Decisions:
		Entry point via RESTful Services
		Use Spring Boot
		Do not Use Spring Data Rest: easy for demo purposes, but hard to restrict. Also, cannot save object graph in one transaction. i.e. create parent first then child
		Return a different code for validation error, instead of returning errors as part of the response
	Requirements:
		Integration tests
			Use RestTemplate as it has the most documentation.
			Look to move to WebClient in the future
			By default, transaction is committed.
			To support rollback, use in memory db. Mocking repo layer too tedious
		Support common exceptions - TODOlater!!!
			https://www.baeldung.com/exception-handling-for-rest-with-spring
		Support validation exceptions
			Return hash maps of errors, status code = 400
		Support  multiple file uploads - TODOlater!!!
		Support security - TODOlater!!!
		Need to support profiles for different envs
		Need to support versioning
			add one package level for version, e.g. v1, starting from controller.
			duplicate from controller to bottom and add as v2
		Be able to wrap as a war file and added to EAR 
		Document rest services using swagger
2. Service
	Design Decisions:
		Use best practice for naming REST service
			
	Requirements:
		Will call DAO
		Will perform validations
	
3. Repository
	Design Decisions:
		Use Spring Data Repository
		Use JPA over Hibernate specific 		
		Favour JPQL Over Criteria
		Return objects for save, update and delete
		Positional vs Named: named preferred easier to read if lots of fields
	Requirements:
		API to compare object fields
			Assertj - Assertions.assertThat(emp2).usingRecursiveComparison().ignoringFieldsMatchingRegexes("id").isEqualTo(emp);
		Test Strategy
			For Repo test, use h2 inmem db for testing, so that easy to insert and delete records for one test and won't affect other tests
			Start with empty db or a known state?
		H2 inmem db
			https://www.baeldung.com/h2-embedded-db-data-storage
			How to setup test so it rolls back per test
				https://reflectoring.io/spring-boot-data-jpa-test/ 
				@DataJpaTest 
			We cannot open h2 db in test
			In case we need to examine db, we can write to real db and see records
				use h2 by default (auto-ddl), specify profile for tempdb (mysql auto-ddl), another for integration (mysql)
			Test scenarios
				a. save Minimum (only required fields)
				b. save Complete with no FKs
				c. save Complete with FKs
				d. update
				e. delete
				f. retrieve one
				g. query with different combinations
			Troubleshoot failing tests:
				Add this to props to see param values: logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
			How to set Test Data during test
				https://techblog.dotdash.com/random-data-generators-for-api-testing-in-java-369c99075208
					Random beans 
						Need to tweak short fields and excluded fields like FK
						
		Real db
			Need a script to delete and insert statements, that will be run multiple times. This will put the db in a known state for integration tests
			Need a script to drop and create tables. this will run every day as a job.
			@SpringBootTest and test with a random port, so REST service can be tested without needing to connect to separate server
			This will not roll back changes.
		Pagination Support
		Custom Repository
			https://www.baeldung.com/spring-data-jpa-query
			pageable
			https://stackoverflow.com/questions/57789833/spring-data-jpa-custom-repository-with-pageable
			https://stackoverflow.com/questions/41692097/jpa-criteriaquery-implements-spring-data-pageable-getsort
		How to add custom method - TODO!!!
			https://www.baeldung.com/spring-data-criteria-queries
			Specification does not support checking for null criteria field so not useful
		How to add named query
			https://thorben-janssen.com/spring-data-jpa-named-queries/
		How to use CriteriaBuilder - TODO!!!
		Need complex JPQL queries for relationships	- TODO!!!
4. Model and DTO
	Design Decisions:
		No need to use interfaces.
		Need to use DTO.
		All ids should be Long
		Use Lombok to reduce boilerplate code
	Requirements:
		Generate entities from Table
			Use Eclipse JPA Tools
			Tweaks needed for generated code:
				Change primitives to Objects to support nullables
			Tweaks needed for Mysql:
				@Id needs these:
					@GeneratedValue(strategy = GenerationType.AUTO, generator = "native")
                    @GenericGenerator(name = "native", strategy = "native")
		Generate tables from Entities
			https://www.baeldung.com/spring-data-jpa-generate-db-schema
		Use H2 In mem db
			https://howtodoinjava.com/spring-boot2/h2-database-example/
			https://reflectoring.io/spring-boot-data-jpa-test/#using-schemasql
				data.sql is run but if ddl-auto is create-drop, then it runs after data.sql. fix is to make it @DataJpaTest(properties = {"spring.jpa.hibernate.ddl-auto=validate"})
				Better workaround is to use @Sql(/init.sql) on the test method
			Cannot access H2 in-mem-db as part of test
				https://stackoverflow.com/questions/45302132/h2-not-creating-updating-table-in-my-spring-boot-app-somethings-wrong-with-my
		Support LocalDate
		Mapping
			Enum - https://www.baeldung.com/jpa-persisting-enums-in-jpa
			LocalDate - https://www.baeldung.com/jpa-java-time
		DTO Design
			https://stackoverflow.com/questions/47843039/how-to-properly-convert-domain-entities-to-dtos-while-considering-scalability
			ModelMapper - api to map fields
				https://www.baeldung.com/entity-to-and-from-dto-for-a-java-spring-application
		Need Validation Support
			https://www.baeldung.com/spring-boot-bean-validation
			Override default validation messages
			Create custom validations
		Need standards for OneToOne, OneToMany and ManyToMany
		Need blob support TODOlater!!!
		Need auditing TODOlater!!!
		
Tools:
Eclipse plugins:
	Lombok - https://projectlombok.org/p2
		for boilerplate code class gen
via marketplace:
	SQL Editor 
		syntax lighting	
	DBeaver?
	

	
Find a way to invoke services packaged in a jar

TO RESEARCH
db questions:
Is it a good idea to use incremental db changes framework?
separate shared db project or db part of the build?
	better part of build, so changes can be tested
how to handle db changes?
investigate flyway
tool to convert hbm.xml to jpa entities
Implement mocking for 3rd party services



Testing Environment Strategy:
Use Profiles to switch between inmem and dev scratch db and local integration db
dev-inmem	in mem db(default)
dev-tempdb 	spring.datasource.url=jdbc:mysql://localhost:3306/myapp-scratch
dev-integ 	spring.datasource.url=jdbc:mysql://localhost:3306/myapp

src/main/resources/data.sql needs to have delete then insert so it can be rerunnable if ddl-auto is update

1. Default is h2
This will run src/main/resources/data.sql

2. Specify profile tempdb to run with mysql scratch db
This will run src/main/resources/data.sql

spring.datasource.initialization-mode is required because data.sql is run only by default for in mem db.
spring.datasource.url=jdbc:mysql://localhost:3306/myapp-scratch
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
spring.datasource.initialization-mode=always

3. Specify profile integ to connect with mysql integration db
This will NOT run src/main/resources/data.sql
Running the tests with this profile will result in failures

spring.datasource.url=jdbc:mysql://localhost:3306/myapp
spring.datasource.username=root
spring.datasource.password=root

JPA
https://www.baeldung.com/jpa-one-to-one			
https://hellokoding.com/one-to-many-and-many-to-one-relationship-mapping-in-jpa-and-hibernate/			
https://www.netsurfingzone.com/jpa/spring-data-jpa-jparepository-getone/
	use getOne to not load referenced object


Issues Encountered:
Bean Validation
	ConstraintViolationException thrown inside repo.save instead of MethodArgumentNotValidException in controller? 
		Needs to be added to DTO and also Entity
	Why Controller @Valid not checking recursively? 
		Need to tag association field with @Valid to make it work 
SQL Logging
	https://www.baeldung.com/sql-logging-spring-boot
JPA
	data.sql not run - both lines needed
	spring.jpa.hibernate.ddl-auto=update
	spring.datasource.initialization-mode=always
	https://stackoverflow.com/questions/45082574/spring-boot-doesnt-load-data-to-initialize-database-using-data-sql
ModelMapper	
	If an aggregate relation is all null, it is not mapped.
	New field not in DTO, test doesn't fail
Generate DB Schema from Entities
	guide was wrong, use https://stackoverflow.com/questions/36966337/how-to-generate-a-ddl-creation-script-with-a-modern-spring-boot-data-jpa-and-h
	if run multiple times and there are changes, appends instead of overwrites
	if enabled, repo test does not auto create ddl
Lombok
	If bidirectional, will get recursion runtime error. Add @EqualsAndHashCode.Exclude, @ToString.Exclude to one side	
Jackson
	If bidirectional, will get recursion runtime error. Add @JsonIgnore to one side		
RepoTest
	@AutoConfigureTestDatabase(replace = Replace.NONE) to connect to real db instead of in memory
	if no db specified, will still use in mem db
h2 vs MySql
	https://medium.com/@skywalkerhunter/quick-tip-use-concat-in-your-h2-mysql-jpql-queries-instead-of-2b0ccef63e90
	use concat instead of ||	